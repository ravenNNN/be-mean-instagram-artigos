{"name":"Be-mean-instagram-artigos","tagline":"Artigos dos alunos do curso Be MEAN Instagram","body":"# Artigo\r\n**autor**: ravenNNN - Baltazar Parra\r\n\r\n## Hoisting\r\n\r\nEm JavaScript antes do nosso código ser executado, ele é lido por inteiro. Nessa hora, todas nossas variáveis e funções,\r\nsão içadas até o topo do nosso escopo, só então a execução de fato acontece. Isso é o que chamamos de Hoisting.\r\n\r\nExplicando melhor:\r\n\r\nSempre que criamos uma variável, ela é içada para o topo do nosso escopo, antes mesmo do nosso código ser executado, ou seja,\r\nela não chega a receber nenhum valor nessa fase, permanecendo indefinida.\r\n\r\n```\r\n    valor = 666;\r\n    var valor;\r\n\r\n    // Como nossas variáveis são içadas antes da execução do código\r\n    // Ela será interpretada assim\r\n\r\n    var valor; // undefined\r\n    valor = 666;\r\n\r\n```\r\n\r\nJá com as declarações de funções é um pouco diferente, não é somente o nome que é içado, neste caso todo corpo da nossa declaração é levado para o topo.\r\n\r\n```\r\n    coisada(); // vai printar \"mensagem coisada\"\r\n               // Porque ali em baixo eu vou criar a função\r\n\r\n    function coisada() {\r\n      console.log(\"mensagem coisada\");\r\n    }\r\n\r\n    // Como nas funções, são içadas o corpo e não somente o nome\r\n    // Eu posso chamar ela em qualquer lugar do código\r\n    // Mesmo não fazendo nenhum sentido aparente.\r\n\r\n```\r\nObs. No caso das expressões, ela vai se comportar como as variáveis, tendo somente seu nome içado.\r\n\r\n## Closure\r\n\r\nAntes de falar sobre as closures, você precisar entender o escopo das variáveis.\r\nO escopo nada mais é que, o ambiente onde você declarou sua variável,\r\nesse ambiente demarca o limite onde você pode usar sua variável.\r\n\r\nSimplificando, closure é uma função interna, que te permite acessar variáveis externas.\r\n\r\n```\r\n    function zeRuela (nomeDoRuela, sobrenomeDoRuela) {\r\n        var chamada = \"Eu sou o \";\r\n\r\n    // Função externa, com variáveis externas.    \r\n\r\n        function nomeInteiro () {\r\n            return chamada + nomeDoRuela + \" \" + sobrenomeDoRuela;\r\n        }\r\n            return nomeInteiro ();\r\n            }\r\n\r\n    // Função interna, que tem acesso as variáveis da função externa.\r\n    // Isso é oque chamamos de closure, Ela pode acessar tanto as variáveis,\r\n    // quanto os paramêtros do lado de fora.\r\n\r\n\r\n    zeRuela (\"Jose\", \"Arruelo\"); // Eu sou o Jose Arruelo\r\n```\r\n\r\nAi em cima temos uma função dentro de outra função, onde a função que está dentro, tem acessos a dados da função que está fora, isso é oque podemos chamar de closure.\r\n\r\n- Beleza, e eu uso isso pra'quê?\r\n\r\nPara construir variáveis privadas ué.\r\n\r\nUma função pode acessar todas variáveis criadas dentro dela, e com as closures podemos acessar também variáveis criadas do lado de fora,\r\nsem bagunçar nosso escopo global deixando nosso código mais inteligivel.\r\n\r\n## Variável Global\r\n\r\nPara chamar uma variável global dentro de uma função, obviamente declaramos ela em escopo global, e depois chamamos ela dentro da nossa função.\r\n\r\n```\r\nvar global = 3;\r\n\r\nfunction chamada() {\r\n  return global * 2;\r\n}\r\n\r\nchamada(); // 6\r\n```\r\n\r\n## Variável por parâmetro\r\n\r\nPassando nosso parâmetro por meio de uma variável, ela vai ficar responsável em fazer o transporte do nosso argumento.\r\n\r\n```\r\n    var valor = 5;\r\n\r\n    function pegaValor(parametro) {\r\n        alert(parametro);\r\n    }\r\n\r\n    pegaValor(valor); // 5\r\n\r\n    // Passamos uma variavel como parametro\r\n\r\n    valor = 12;\r\n\r\n    pegaValor(valor); // 12\r\n\r\n    // Mudando o argumento da função.\r\n```\r\n\r\nCriamos uma variável com o valor 5 e chamamos nossa função passando esta variável como parâmetro, depois alteramos nosso argumento trocando o valor da nossa variável.\r\n\r\n## Instanciação usando uma IIFE\r\n\r\nAté o ano de 2010, davamos o nome de self-executing anonymous function, para funções executadas no momento em que eram definidas.\r\n\r\n```\r\n    (function () {\r\n        console.log('E ae, meu nome é Self-Executing Anonynous Function, Prazer')\r\n    }())\r\n```\r\n\r\nAté que um cara chamado Cowboy (Ben Alman) publicou um [longo artigo](http://benalman.com/news/2010/11/immediately-invoked-function-expression/) sobre como não concordava com esse nome,\r\ncunhando o termo IIFE.\r\n\r\n(Artigo em Desenvolvimento...)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}